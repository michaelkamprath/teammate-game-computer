#require "mostek-3870-asm >= 0.0.1"

#create_memzone program_zone $100 $4FF
#create_memzone timer_handler $020 $09F
#create_memzone external_interupt_handler $0A0 $0FF
#create_memzone kernel_zone $500 $7FF

; Include other aspects of the kernel
#include "display.af8"

; Kernel Notes
;
;   The kernel has two main tasks: generate the display multiplexing
;   and provinding a means to scan the keyboard.
;
;   * In general, only one level of subroutines is supported. The
;     timer_handler will do the right thing so as not to interfere
;     with any running subroutine, but subroutines called from the
;     application should not be nested. This includes call to kernel
;     subroutines.
;   * Register Q is free to be used for interacting with data counter.
;     Register Q is not used when managing the return stack.
;   * Any application subroutine should first save stack pointer P to
;     register K with "lr k,p", and then return from the subroutine
;     using the "pk" instruction.
;   * The kernel and subroutines called by the timer handler
;     should not use any numbered scratch pad registers less than
;     scratch pad 5. Scratch pad registers 1-4 are reserved for
;     application code and some subroutines. Similarly, registers
;     5-11 (10 and 11 being H) are reserved for kernel.
;   * Register 1 is generally used for subroutine argument passing.
;   * Addressed scratch pad registers $30 and higher are reserved
;     for the kernel
;

_TIMER_COUNTER_VALUE = 20
; Set the interupt control port (6)
;       bit 1 - timer intrupt enable
;       bit 3 - start timer
;       bit 5 - /2 prescale
;       bit 6 - /5 prescale
;       bit 7 - /20 prescale
_INTERUPT_CONFIG_BITS = b10101010

; SP Registers Used
TIMER_TEMP_R = 6
_AREG_SAVE_R = 7
_ISAR_SAVE_R = 8
; J is register 9 - used to save status register
; H is registers 10 & 11 - used to save data counter
_KU_SAVE_SPR = $3A
_KL_SAVE_SPR = $3B

;
; bootstrap code
.org 0
_init:
    di
    pi initialize_display
    ; set up the timer
    li _TIMER_COUNTER_VALUE
    outs 7
    li _INTERUPT_CONFIG_BITS
    outs 6
    ; enable interupts
    ei
    jmp _start_program



.org 0 "program_zone"
_start_program:
; nothing should be implemented here. Only defined to
; create a known label for the start point of the program

.memzone timer_handler
timer_handler:
    di                          ; disable further interupts while in handler
    lr _AREG_SAVE_R,a           ; save A register
    lr j,w                      ; save status register
    lr a,is
    lr _ISAR_SAVE_R,a            ; save ISAR
    ; set up stack so subroutines can be called from here
    li _KU_SAVE_SPR
    lr is,a
    lr a,ku
    lr [is],a
    li _KL_SAVE_SPR
    lr is,a
    lr a,kl
    lr [is],a
    lr k,p
    ; save data counter
    lr h,dc

    ; jump to display handler
    pi display_scan

.end_timer_handler:

    ; restore data counter
    lr dc,h
    ; restore stack and K
    lr p,k
    lris a,_KU_SAVE_SPR
    lr ku,a
    lris a,_KL_SAVE_SPR
    lr kl,a
    ; restore registers
    lr a,_ISAR_SAVE_R
    lr is,a                     ; restore ISAR
    lr w,j                      ; restore status register
    ; reset the timer
    li _TIMER_COUNTER_VALUE
    outs 7
    li _INTERUPT_CONFIG_BITS
    outs 6
    ; finally, restore a register
    lr a,_AREG_SAVE_R           ; restore A register (must be last update in timer handler)
    ei                          ; re-enable interupts
    pop