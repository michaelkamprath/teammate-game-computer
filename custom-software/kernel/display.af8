#require "mostek-3870-asm >= 0.0.1"

.memzone kernel_zone

_LEDS_TEMP_R = KERNEL_TEMP_R

DISPLAY_SCAN_STATE_SPR = $32
HEX_DISPLAY_VALUE_SPR = $33
SCREEN_BUFFER_A_SPR = $34
SCREEN_BUFFER_B_SPR = $35
_ROW_SPR = $36
_COL_SPR = $37
;
; Screen Buffer layout - as viewed from user's perspective.
;
;     [A|B]x ==> buffer byte A or B, bit x
;
;
;               COL0  COL1  COL2  COL3
;           +--------------------------+
;           ;                          :
;    ROW0   :   A4    A3    B4    B3   :
;           :                          :
;    ROW1   :   A5    A2    B5    B2   :
;           :                          :
;    ROW2   :   A6    A1    B6    B1   :
;           :                          :
;    ROW3   :   A7    A0    B7    B0   :
;           :                          :
;           +--------------------------+
;
; DISPLAY_SCAN_STATE_SPR bit map
;
;       bits 7 6 5 4 3 2 1 0
;            xxxxxxx|---|---|
;                     |   +---> Scan pass counter
;                     +-------> Hex display config
;
;   Details:
;       * Scan Pass Counter: indicates which element of the display hardware
;           should be multiplexed next. Values are:
;               0 - left LED bank
;               1 - right LED bank
;               2 - left hex value
;               3 - right hex value
;       * Hex Display Config - indicates how the hex value should be displayed
;               0 - Hex value should be diplsay as a 2-digit hex number with
;                   leading 0
;               1 - Hex value should be displayed as a 2-digit number without
;                   a leading 0, but right 0 value still shown
;               2 - Upper nibble of hex value indicates a special charater, and
;                   lower nibble value should be displayed as a hext value. The
;                   special chracter values supported for upper nibble value:
;                        0 - Empty value
;                        1 - letter "P" (to display P-keys)
;                        2 - underscore _
;                        3 - dash -
;               3 - hex display is off

; initialize_display
;
;   Initializes the displays
;
;   Arguments
;       None
initialize_display:
    lr k,p                          ; save return address to K
    ; initialize scan state.
    ; this sets hex display to have a leading zero
    li DISPLAY_SCAN_STATE_SPR
    lr is,a
    clr
    lr [is],a
    ; clear screen
    li SCREEN_BUFFER_A_SPR
    lr is,a
    clr
    lr [is]+,a                      ; increment IS because next is SCREEN_BUFFER_B_SPR
    lr [is],a
    li HEX_DISPLAY_VALUE_SPR
    lr is,a
    clr
    lr [is],a
    pk                             ; return to address K

set_hex_no_leading_zeros:
    lr k,p                          ; save return address to K
    lris a,DISPLAY_SCAN_STATE_SPR
    ni b11110011
    ai b00000100
    lr [is],a
    pk

set_hex_leading_zeros:
    lr k,p                          ; save return address to K
    lris a,DISPLAY_SCAN_STATE_SPR
    ni b11110011
    lr [is],a
    pk

set_hex_leading_special_char:
    lr k,p                          ; save return address to K
    lris a,DISPLAY_SCAN_STATE_SPR
    ni b11110011
    ai b00001000
    lr [is],a
    pk

set_hex_off:
    lr k,p                          ; save return address to K
    lris a,DISPLAY_SCAN_STATE_SPR
    ni b11110011
    ai b00001100
    lr [is],a
    pk

; clear_display_leds - subroutine
;
;   Sets all LEDs off.
;
;   Arguments
;       None
clear_display_leds:
    lr k,p                          ; save return address to K
_internal_clear_leds:
    li SCREEN_BUFFER_A_SPR
    lr is,a
    clr
    lr [is]+,a                      ; increment IS because next is SCREEN_BUFFER_B_SPR
    lr [is],a
    pk                              ; return to address K


; set_hex_value
;
;   Sets the values displayed on hex display
;
;   Argument
;       sp 1 - the value to disdplay
;
set_hex_value:
    lr k,p                          ; save return address to K
    li HEX_DISPLAY_VALUE_SPR
    lr is,a
    lr a,1
    lr [is],a
    pk

; set LED status
;
;   Sets the indicated LED on or off
;
;   Argument
;       sp 1 - Indicates the LED to set and to what value
;
;       bits 7 6 5 4 3 2 1 0
;            x x x|-|---|---|
;                  |  |   +---> X coordinate (COL0 - COL3)
;                  |  +-------> Y coordinate (ROW0 - ROW3)
;                  +----------> on (1) or off (0)
;
;       This effectively makes sp 1 to have the format where the
;       upper nibble is 1 or 0 for on or off, and the lower
;       nibble is the LED number, which is calculated with:
;
;           LED Number = row*4 + column
;
;       Where row and column are values beteen 0 and 3 inclusive.
;
;   Uses registers 3 & 4
;
set_display_led:
    lr k,p                          ; save return address to K
    ; move x coordinate to sp _COL_R
    li _COL_SPR
    lr is,a
    lr a,1
    ni b00000011
    lr [is],a
    ; move y coordinate to sp _ROW_R
    li _ROW_SPR
    lr is,a
    lr a,1
    ni b00001100
    sr 1
    sr 1
    lr [is],a

    ; determine buffer bit
    ; determine if left or right column of buffer
    lris a,_COL_SPR
    ni b00000001
    bnz .right_col                  ; if column is odd, right column
.left_col:
    ; bit is row number + 4
    lris a,_ROW_SPR
    ai 4
    br .set_bit
.right_col:
    ; bit is 3 minus row number
    lris a,_ROW_SPR
    com
    inc                             ; 2's complement (1's complement + 1)
    ai 3
.set_bit:
    lr _LEDS_TEMP_R,a
    ; _LEDS_TEMP_R is now the bit number
    lis 1                           ; set A to 1
.set_bit_loop:
    ds _LEDS_TEMP_R                 ; decrement bit number in _LEDS_TEMP_R
    bnc .apply_bit                  ; if no carry, that means SP2 was 0. Done
    sl 1
    br .set_bit_loop
.apply_bit:
    ; load bit value into _LEDS_TEMP_R for temp keeping
    lr _LEDS_TEMP_R,a
    ; determine buffer A or B by inspecting bit 1 of column
    lris a,_COL_SPR
    ni b00000010
    bnz .buffer_b                   ; columns 2 & 3 are buffer B
.buffer_a:
    li SCREEN_BUFFER_A_SPR
    br .load_buffer_spr
.buffer_b:
    li SCREEN_BUFFER_B_SPR
.load_buffer_spr:
    lr is,a
    ; determine if we are setting or unsetting bit
    lr a,1
    ni b00010000
    bz .set_led_off
.set_led_on:
    lr a,[is]                       ; load buffer value from prior set IS
    ; This is all done because there is no OR from scratch pad insttruction.
    ns _LEDS_TEMP_R                 ; determine if bit is already set
    bnz .finalize_led_status        ; it is set, finalize
    lr a,[is]                       ; it is not set, reload and add bit
    as _LEDS_TEMP_R                 ; add bit to be set.
    lr [is],a                       ; update buffer value
    br .finalize_led_status
.set_led_off:
    ; turn bit value into a AND mask
    lr a,_LEDS_TEMP_R
    com
    lr _LEDS_TEMP_R,a               ; register _LEDS_TEMP_R is now an AND mask
    lr a,[is]                       ; load buffer value from prior set IS
    ns _LEDS_TEMP_R
    lr [is],a                       ; update buffer value
.finalize_led_status:
    pk                              ; done!

; HEX Character Table
;   bit 0 - segment X
;   bit 1 - segment G
;   bit 2 - segment F
;   bit 3 - segment E
;   bit 4 - segment D
;   bit 5 - segment C
;   bit 6 - segment B
;   bit 7 - segment A
_hex_char_table:
    .byte b11111100   ; value 0
    .byte b01100000   ; value 1
    .byte b11011010   ; value 2
    .byte b11110010   ; value 3
    .byte b01100110   ; value 4
    .byte b10110110   ; value 5
    .byte b10111110   ; value 6
    .byte b11100000   ; value 7
    .byte b11111110   ; value 8
    .byte b11100110   ; value 9
    .byte b11101110   ; value A
    .byte b00111110   ; value B
    .byte b10011100   ; value C
    .byte b01111010   ; value D
    .byte b10011110   ; value E
    .byte b10001110   ; value F

_hex_special_char_table:
    .byte 0           ; empty
    .byte b11001110   ; P character
    .byte b00010000   ; under score
    .byte b00000010   ; dash
    .byte 0           ; undefined
    .byte 0           ; undefined
    .byte 0           ; undefined
    .byte 0           ; undefined
    .byte 0           ; undefined
    .byte 0           ; undefined
    .byte 0           ; undefined
    .byte 0           ; undefined
    .byte 0           ; undefined
    .byte 0           ; undefined
    .byte 0           ; undefined
    .byte 0           ; undefined

_multiplex_pin_table:
    .byte 1
    .byte 2
    .byte $80
    .byte $40

; display_scan
;
;   should only be called from timer_handler

display_handler:
    ; turn off multiplexer
    clr
    outs 0
    com
    outs 1
    ; prepare jump table
    dci .scan_state_jump_table
    ; get scan state
    lris a,DISPLAY_SCAN_STATE_SPR
    ; get first two bits
    ni b00000011
    ; add twice to jump table address for each 2-byte jump entry
    adc
    adc
    ; execute jump table
    lr q,dc
    lr p0,q
.scan_state_jump_table:
    br .leds_buffer_a
    br .leds_buffer_b
    br .left_hex
    br .right_hex

.leds_buffer_a:
    li SCREEN_BUFFER_A_SPR
    lr is,a
    br .write_display_buffer
.leds_buffer_b:
    li SCREEN_BUFFER_B_SPR
    lr is,a
.write_display_buffer:
    lr a,[is]
    com
    outs 1
    br .update_handler_state

.right_hex:
    ; first check to see if hex display is off
    lris a,DISPLAY_SCAN_STATE_SPR
    ni b00001100
    ci b00001100
    bz .update_handler_state
    ; now update hex value
    li HEX_DISPLAY_VALUE_SPR
    lr is,a
    lr a,[is]
    ni $0F
    br .load_norml_hex_value_lut
.left_hex:
    li HEX_DISPLAY_VALUE_SPR
    lr is,a
    lr a,[is]
    ni $F0
    sr 4
    lr TIMER_TEMP_R,a                 ; load left valeu into temp
    ; determine how to show left display
    dci .left_hex_display_jump_table
    lris a,DISPLAY_SCAN_STATE_SPR
    ni b00001100
    sr 1
    sr 1
    ; add twice to jump table address for each 2-byte jump entry
    adc
    adc
    ; load value to display into A
    lr a,TIMER_TEMP_R
    ; execute jump table
    lr q,dc
    lr p0,q
.left_hex_display_jump_table:
    br .load_norml_hex_value_lut
    br .left_no_leading_zero
    br .left_special_char
    br .update_handler_state        ; actually, don't show anything

.left_no_leading_zero:
    ci 0
    bnz .load_norml_hex_value_lut
    li $FF
    br .show_hex_value
.left_special_char:
    ; fetch hex character from special LUT
    dci _hex_special_char_table
    br .load_hex_pattern
.load_norml_hex_value_lut:
    ; fetch hex character from normal LUT
    dci _hex_char_table
.load_hex_pattern:
    adc
    lm
    com                             ; invert the bits
.show_hex_value:
    outs 1



.update_handler_state:
    dci _multiplex_pin_table
    ; get scan state
    lris a,DISPLAY_SCAN_STATE_SPR
    ; get first two bits
    ni b00000011
    adc
    lm
    outs 0
    ; increment scan counter
    lris a,DISPLAY_SCAN_STATE_SPR
    ; get first two bits
    ni b00000011
    inc
    ci 4
    bnz .update_handler_state2
    ; reset state to zero
    lr a,[is]
    ni b11111100
    lr [is],a
    br .end_handler
.update_handler_state2:
    ; increment state (don't need to mask because we know state counter won't be 4)
    lr a,[is]
    inc
    lr [is],a
.end_handler:
    pop
